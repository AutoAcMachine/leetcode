class Solution {
public:
    vector<vector<string>> solveNQueens(int n){
        vector<vector<string>> res;
        vector<vector<int>> vis(3,vector<int>(n*2,0));
        vector<int> c(n,0);
        dfs(0,n,c,vis,res);
        return res;
    }
    void dfs(int cur,int& n,vector<int>& c,vector<vector<int>>& vis,vector<vector<string>>& res){
        if(cur==n){
            vector<string> tmp;
            for(int i=0;i<n;i++){
                string s(n,'.');
                s[c[i]]='Q';
                tmp.push_back(s);
            }
            res.push_back(tmp);
            return ;
        }
        for(int i=0;i<n;i++)
            if(!vis[0][i]&&!vis[1][cur+i]&&!vis[2][cur-i+n]){
               c[cur]=i;
               vis[0][i]=vis[1][cur+i]=vis[2][cur-i+n]=1;
                dfs(cur+1,n,c,vis,res);
               vis[0][i]=vis[1][cur+i]=vis[2][cur-i+n]=0;
            }
    }
};
