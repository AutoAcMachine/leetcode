class Solution {
public:
    int minDistance(string word1, string word2) {
        int n=word1.length(),m=word2.length();
        vector<vector<int>> dp(n+1,vector<int>(m+1,0));
        
        for(int i=1;i<=n;i++)dp[i][0]=i;
        for(int i=1;i<=m;i++)dp[0][i]=i;
        
        for(int i=1;i<=n;i++)
            for(int j=1;j<=m;j++)
                if(word1[i-1]==word2[j-1])
                    dp[i][j]=dp[i-1][j-1];
                else
                    dp[i][j]=min(dp[i-1][j],min(dp[i-1][j-1],dp[i][j-1]))+1;
        return dp[n][m];
    }
};
class Solution {
public:
    int minDistance(string word1, string word2) {
        int n=word1.length(),m=word2.length();
        vector<vector<int>> dp(2,vector<int>(m+1,0));
        //dp[i][j] 只与dp[i-1][j-1] dp[i-1][j] dp[i][j-1]有关，使用滚动数组
        //时间O(nm) 空间O(m)
        for(int i=1;i<=m;i++)dp[0][i]=i;
        
        for(int i=1;i<=n;i++){
            dp[i&1][0]=i;
            for(int j=1;j<=m;j++)
                if(word1[i-1]==word2[j-1])
                    dp[i&1][j]=dp[(i-1)&1][j-1];
                else
                    dp[i&1][j]=min(dp[(i-1)&1][j],min(dp[(i-1)&1][j-1],dp[i&1][j-1]))+1;
        
        }
        return dp[n&1][m];
    }
};
