//做法很多
//O(n^3)暴力枚举起点终点，然后判断
//dp ,枚举起点和终点，省去判断中间O(n^2)
//中心扩展，不过要讨论奇数偶数
//Manacher  O(n)

class Solution {
public:
    string longestPalindrome(string s) {
        int n=s.length();
        if(n<=1)return s;
        
        vector<vector<bool>> dp(n,vector<bool>(n,false));
        
        int r1=0,r2=0;
        
        for(int i=0;i<n;i++){
            int j=i;
            while(j>=0){
                if(s[i]==s[j]&&(i-j<2||dp[j+1][i-1]))
                    dp[j][i]=true;
                if(dp[j][i]&&i-j+1>r2)r1=j,r2=i-j+1;
                j--;
            }
        }
        return s.substr(r1,r2);
    }
};
