class Solution {
public:
    //循环数组中二分
    
    //二分最小的数开始的位置，然后再正常二分
    //或者直接二分，按情况分类
    
    int search(vector<int>& nums, int target) {
        
        int l=0,r=nums.size()-1;
        if(r==-1)return -1;
        while(l<r){
            int mid=(l+r)/2;
            
            if(nums[mid]==target)return mid;
            
            if(nums[l]<=nums[mid]){
                if(target>=nums[l]&&target<nums[mid])
                    r=mid-1;
                else
                    l=mid+1;
            }
            else{
                if(target>nums[mid]&&target<=nums[r])
                    l=mid+1;
                else
                    r=mid-1;
            }
            
        }
        return nums[l]==target?l:-1;
    }
};

class Solution {
public:
    int search(vector<int>& nums, int target) {
        int len=nums.size();
        
        int l=0,r=len-1;
        
        while(l<r){
            int mid=(l+r)>>1;
            if(nums[mid]>nums[r])
                l=mid+1;
            else
                r=mid;
        }
        int p=l;
        l=0,r=len-1;
        
        while(l<=r){
            int mid=(l+r)/2;
            int rmid=(mid+p)%len;
            if(nums[rmid]==target)return rmid;
            else if(nums[rmid]<target)l=mid+1;
            else r=mid-1;
        }
        return -1;
    }
};
